//===---- MiniATISelDAGToDAG.h - A Dag to Dag Inst Selector for MiniAT --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MIPS target.
//
//===----------------------------------------------------------------------===//

#ifndef MINIATISELDAGTODAG_H
#define MINIATISELDAGTODAG_H

#include "MiniAT.h"
#include "MiniATSubtarget.h"
#include "MiniATTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// MiniATDAGToDAGISel - MIPS specific code to select MIPS machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

    class MiniATDAGToDAGISel : public SelectionDAGISel {
    public:
        explicit MiniATDAGToDAGISel(MiniATTargetMachine &TM)
                : SelectionDAGISel(TM), Subtarget(nullptr) {}

        // Pass Name
        const char *getPassName() const override {
            return "MINIAT DAG->DAG Pattern Instruction Selection";
        }

        bool runOnMachineFunction(MachineFunction &MF) override;

        virtual void PostprocessISelDAG() override;

    protected:
        SDNode *getGlobalBaseReg();

        /// Keep a pointer to the MiniATSubtarget around so that we can make the right
        /// decision when generating code for different targets.
        const MiniATSubtarget *Subtarget;

    private:
        // Include the pieces autogenerated from the target description.
#include "MiniATGenDAGISel.inc"

        /// getTargetMachine - Return a reference to the TargetMachine, casted
        /// to the target-specific type.
        const MiniATTargetMachine &getTargetMachine() {
            return static_cast<const MiniATTargetMachine &>(TM);
        }

        SDNode *Select(SDNode *N) override;

        virtual std::pair<bool, SDNode*> selectNode(SDNode *Node) = 0;

        // Complex Pattern.
        bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

        // getImm - Return a target constant with the specified value.
        inline SDValue getImm(const SDNode *Node, unsigned Imm) {
            return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
        }

        virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

    };

/// createMiniATISelDag - This pass converts a legalized DAG into a
/// MINIAT-specific DAG, ready for instruction scheduling.
    FunctionPass *createMiniATISelDag(MiniATTargetMachine &TM);

}

#endif
